@import("Foundation");
@import("UIKit");

exports.createURLSessionBackgroundConfiguration = function (identifier) {
	if (identifier.length != 0) {
		return NSURLSessionConfiguration.backgroundSessionConfiguration(identifier);
	} else {
		console.log("[ERROR] Need to specify a proper identifier to create a URLSessionConfiguration.");
	}
}

exports.createURLSession = function (sessionConfig) {
	if	(sessionConfig != null) {
		var unused, sessiondelegate = UIApplication.sharedApplication().delegate;
		return NSURLSession.sessionWithConfiguration(sessionConfig, sessiondelegate, unused);
	} else {
		console.log("[ERROR] Cannot create URLSession, please provide a proper session configuration object. ");
	}
}

exports.finishTasksAndInvalidate = function(session) {
	if (session != null) {
		session.finishTasksAndInvalidate();
	} else {
		console.log("[ERROR] Provided session is empty. Provide a proper session to invalidate");
	}
}

exports.invalidateAndCancel = function (session) {
	if (session != null) {
		session.invalidateAndCancel();
	} else {
		console.log("[ERROR] Provided session is empty. Provide a proper session to invalidate");
	}
}

exports.backgroundDownloadTaskWithURL = function(session, url) {
	if (session != null) {
		if (url.length != 0) {
			var taskurl = NSURL.URLWithString(url); 
			var task = session.downloadTaskWithURL(taskurl);
			task.resume();
			return task.taskIdentifier;
		} else {
			console.log("[ERROR] The specified url for background download task is empty. Please provide a proper url");
			return null;
		}
	} else {
		console.log("[ERROR] Need to specify a proper URLSession to start a background download task");
		return null;
	}
}
